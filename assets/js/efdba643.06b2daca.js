"use strict";(self.webpackChunkbasemind_docs=self.webpackChunkbasemind_docs||[]).push([[477],{3388:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>o,contentTitle:()=>a,default:()=>p,frontMatter:()=>r,metadata:()=>l,toc:()=>d});var t=i(1527),s=i(8672);const r={sidebar_position:1,sidebar_label:"Android",slug:"/clients/kotlin"},a="Android Client",l={id:"clients/kotlin",title:"Android Client",description:"The BaseMind Android client library is a Kotlin based library that can be",source:"@site/docs/clients/kotlin.md",sourceDirName:"clients",slug:"/clients/kotlin",permalink:"/docs/clients/kotlin",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,sidebar_label:"Android",slug:"/clients/kotlin"},sidebar:"tutorialSidebar",previous:{title:"Client Libraries",permalink:"/docs/clients/"},next:{title:"Apple Platforms",permalink:"/docs/clients/swift"}},o={},d=[{value:"Installation",id:"installation",level:2},{value:"Usage",id:"usage",level:2},{value:"Prompt Request/Response",id:"prompt-requestresponse",level:3},{value:"Prompt Streaming",id:"prompt-streaming",level:3},{value:"Error Handling",id:"error-handling",level:3},{value:"Options",id:"options",level:3},{value:"Passing Prompt Config ID",id:"passing-prompt-config-id",level:3}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"android-client",children:"Android Client"}),"\n",(0,t.jsxs)(n.p,{children:["The BaseMind ",(0,t.jsx)(n.a,{href:"https://github.com/basemind-ai/sdk-android",children:"Android client library"})," is a Kotlin based library that can be\nused in Android >= 25.0."]}),"\n",(0,t.jsx)(n.h2,{id:"installation",children:"Installation"}),"\n",(0,t.jsxs)(n.p,{children:["Add the dependency in your application's ",(0,t.jsx)(n.code,{children:"build.gradle.kts"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-kotlin",children:'dependencies {\n    implementation("ai.basemind:client:1.0.0")\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"usage",children:"Usage"}),"\n",(0,t.jsxs)(n.p,{children:["Before using the client you have to initialize it. The init function requires an ",(0,t.jsx)(n.code,{children:"apiKey"})," that you can create using the\nBaseMind platform (visit ",(0,t.jsx)(n.a,{href:"https://basemind.ai",children:"https://basemind.ai"}),"):"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-kotlin",children:'import ai.basemind.client.BaseMindClient\n\nval client = BaseMindClient.getInstance("<API_KEY")\n'})}),"\n",(0,t.jsx)(n.p,{children:"Once the client is initialized, you can use it to interact with the AI model(s) you configured in the BaseMind dashboard."}),"\n",(0,t.jsx)(n.h3,{id:"prompt-requestresponse",children:"Prompt Request/Response"}),"\n",(0,t.jsxs)(n.p,{children:["You can request an LLM prompt using the ",(0,t.jsx)(n.code,{children:"requestPrompt"})," method, which expects a dictionary of string key/value pairs -\ncorrelating with any template variables defined in the dashboard (if any):"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-kotlin",children:'import ai.basemind.client.BaseMindClient\n\nval client = BaseMindClient.getInstance("<API_KEY")\n\nfun handlePromptRequest(userInput: String): String {\n    val map = mapOf("userInput" to userInput)\n    val response = client.requestPrompt(map)\n\n    return response.content\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"prompt-streaming",children:"Prompt Streaming"}),"\n",(0,t.jsxs)(n.p,{children:["You can also stream a prompt response using the ",(0,t.jsx)(n.code,{children:"requestStream"})," method:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-kotlin",children:'import ai.basemind.client.BaseMindClient\n\nval client = BaseMindClient.getInstance("<API_KEY")\n\nfun handlePromptStream(userInput: String): MutableList<String> {\n    val map = mapOf("userInput" to userInput)\n    val response = client.requestStream(map)\n\n    val chunks: MutableList<String> = mutableListOf()\n    response.collect { chunk -> chunks.add(chunk.content) }\n\n    return chunks\n}\n'})}),"\n",(0,t.jsxs)(n.p,{children:["Similarly to the ",(0,t.jsx)(n.code,{children:"requestPrompt"})," method, ",(0,t.jsx)(n.code,{children:"requestStream"})," expects a mapping of strings (if any template variables are\ndefined in the dashboard)."]}),"\n",(0,t.jsx)(n.h3,{id:"error-handling",children:"Error Handling"}),"\n",(0,t.jsxs)(n.p,{children:["All errors thrown by the client are subclasses of ",(0,t.jsx)(n.code,{children:"BaseMindException"}),". Errors are thrown in the following cases:"]}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["The api key is empty (",(0,t.jsx)(n.code,{children:"MissingAPIKeyException"}),")."]}),"\n",(0,t.jsxs)(n.li,{children:["A server side or connectivity error occurred (",(0,t.jsx)(n.code,{children:"APIGatewayException"}),")."]}),"\n",(0,t.jsxs)(n.li,{children:["A required template variable was not provided in the mapping passed to the request (",(0,t.jsx)(n.code,{children:"MissingPromptVariableException"}),")."]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"options",children:"Options"}),"\n",(0,t.jsx)(n.p,{children:"You can pass an options object to the client:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-kotlin",children:'import ai.basemind.client.BaseMindClient\nimport ai.basemind.client.Options\n\nval options = Options(\n    debug = true,\n    debugLogger = { tag, message -> Log.i(tag, message)},\n    serverAddress = "127.0.0.1",\n    serverPort = 443,\n    terminationDelaySeconds = 10L,\n)\n\nval client = BaseMindClient.getInstance("<API_KEY", options = options)\n'})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"debugLogger"}),": a function that receives a logging tag and a logging message and handles logging."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"debug"}),": if set to true (default false) the client will log debug messages."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"serverAddress"}),": the host of the BaseMind Gateway server to use."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"serverPort"}),": the server port."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"terminationDelaySeconds"}),": The amount of seconds a channel shutdown should wait before force terminating requests."]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"passing-prompt-config-id",children:"Passing Prompt Config ID"}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"BaseMindClient.getInstance"})," also accepts an optional ",(0,t.jsx)(n.code,{children:"promptConfigId"})," parameter. This parameter is ",(0,t.jsx)(n.code,{children:"null"})," by\ndefault which means the client will use the prompt configuration defined as ",(0,t.jsx)(n.code,{children:"default"})," in the dashboard."]}),"\n",(0,t.jsx)(n.p,{children:"You can also pass a specific prompt config ID to the client:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-kotlin",children:'import ai.basemind.client.BaseMindClient\n\nval client = BaseMindClient.getInstance("<API_KEY", promptConfigId = "c5f5d1fd-d25d-4ba2-b103-8c85f48a679d")\n'})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Note"}),": you can have multiple client instances with different ",(0,t.jsx)(n.code,{children:"promptConfigId"})," values set. This allows you to use\nmultiple model configurations within a single application."]})]})}function p(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},8672:(e,n,i)=>{i.d(n,{Z:()=>l,a:()=>a});var t=i(959);const s={},r=t.createContext(s);function a(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);