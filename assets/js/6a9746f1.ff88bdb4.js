"use strict";(self.webpackChunkbasemind_docs=self.webpackChunkbasemind_docs||[]).push([[447],{5229:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>p,frontMatter:()=>r,metadata:()=>a,toc:()=>d});var i=t(1527),s=t(8672);const r={sidebar_position:2,sidebar_label:"Apple Platforms",slug:"/clients/swift"},l="Apple Platforms Client",a={id:"clients/swift",title:"Apple Platforms Client",description:"The BaseMind Swift client library supports the following",source:"@site/docs/clients/swift.md",sourceDirName:"clients",slug:"/clients/swift",permalink:"/clients/swift",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2,sidebar_label:"Apple Platforms",slug:"/clients/swift"},sidebar:"tutorialSidebar",previous:{title:"Android",permalink:"/clients/kotlin"}},o={},d=[{value:"Installation",id:"installation",level:2},{value:"Usage",id:"usage",level:2},{value:"Prompt Request/Response",id:"prompt-requestresponse",level:3},{value:"Prompt Streaming",id:"prompt-streaming",level:3},{value:"Error Handling",id:"error-handling",level:3},{value:"Options",id:"options",level:3}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"apple-platforms-client",children:"Apple Platforms Client"}),"\n",(0,i.jsxs)(n.p,{children:["The BaseMind ",(0,i.jsx)(n.a,{href:"https://github.com/basemind-ai/sdk-ios",children:"Swift client library"})," supports the following\nApple platforms:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"iOS >= v13.0"}),"\n",(0,i.jsx)(n.li,{children:"macOS >= v12.0"}),"\n",(0,i.jsx)(n.li,{children:"macCatalyst >= v13.0"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"installation",children:"Installation"}),"\n",(0,i.jsxs)(n.p,{children:["Add the sdk in your ",(0,i.jsx)(n.code,{children:"Package.swift"})," file dependencies:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-swift",children:'    dependencies: [\n        .package(url: "https://github.com/basemind-ai/sdk-ios.git", from: "1.0.0"),\n    ]\n'})}),"\n",(0,i.jsx)(n.p,{children:"Then add the dependency to a target:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-swift",children:'    targets: [\n        .target(\n            name: "MyApp",\n            dependencies: ["BaseMindClient"]\n        ),\n    ]\n'})}),"\n",(0,i.jsx)(n.h2,{id:"usage",children:"Usage"}),"\n",(0,i.jsxs)(n.p,{children:["Before using the client you have to initialize it. The init function requires an ",(0,i.jsx)(n.code,{children:"apiKey"})," that you can create using the\nBaseMind platform (visit ",(0,i.jsx)(n.a,{href:"https://basemind.ai",children:"https://basemind.ai"}),"):"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-swift",children:'import BaseMindClient\n\nlet client = BaseMindClient(apiKey: "<MyApiKey>")\n'})}),"\n",(0,i.jsx)(n.p,{children:"Once the client is initialized, you can use it to interact with the AI model(s) you configured in the BaseMind\ndashboard."}),"\n",(0,i.jsx)(n.h3,{id:"prompt-requestresponse",children:"Prompt Request/Response"}),"\n",(0,i.jsxs)(n.p,{children:["You can request an LLM prompt using the ",(0,i.jsx)(n.code,{children:"requestPrompt"})," method, which expects a dictionary of string key/value pairs -\ncorrelating with any template variables defined in the dashboard (if any):"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-swift",children:'import BaseMindClient\n\nlet client = BaseMindClient(apiKey: "<MyApiKey>")\n\nfunc handlePromptRequest(userInput: String) async throws -> String {\n    let templateVariables = ["userInput": userInput]\n\n    let response = try client.requestPrompt(templateVariables)\n\n    return response.content\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"prompt-streaming",children:"Prompt Streaming"}),"\n",(0,i.jsxs)(n.p,{children:["You can also stream a prompt response using the ",(0,i.jsx)(n.code,{children:"requestStream"})," method:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-swift",children:'import BaseMindClient\n\nlet client = BaseMindClient(apiKey: "<MyApiKey>")\n\nfunc handlePromptStream(userInput: String) async throws -> [String] {\n    let templateVariables = ["userInput": userInput]\n\n    let stream = try client.requestStream(templateVariables)\n\n    var chunks: [String] = []\n\n    for try await response in stream {\n        chunks.append(response.content)\n    }\n\n    return chunks\n}\n'})}),"\n",(0,i.jsxs)(n.p,{children:["Similarly to the ",(0,i.jsx)(n.code,{children:"requestPrompt"})," method, ",(0,i.jsx)(n.code,{children:"requestStream"})," expects a dictionary of strings (if any template variables\nare defined in the dashboard)."]}),"\n",(0,i.jsx)(n.p,{children:"It returns a data container that is both an AsyncSequence and an AsyncIterator. You can therefore loop and iterate\nthrough the results as fits your use case."}),"\n",(0,i.jsx)(n.h3,{id:"error-handling",children:"Error Handling"}),"\n",(0,i.jsxs)(n.p,{children:["All errors thrown by the client are instances of ",(0,i.jsx)(n.code,{children:"BaseMindError"}),". Errors are thrown in the following cases:"]}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["The api key is empty (",(0,i.jsx)(n.code,{children:"BaseMindError.missingToken"}),")."]}),"\n",(0,i.jsxs)(n.li,{children:["A server side or connectivity error occurred (",(0,i.jsx)(n.code,{children:"BaseMindError.serverError"}),")"]}),"\n",(0,i.jsxs)(n.li,{children:["A required template variable was not provided in the dictionary of the request (",(0,i.jsx)(n.code,{children:"BaseMindError.invalidArgument"}),")."]}),"\n",(0,i.jsxs)(n.li,{children:["The task containing streaming is cancelled (",(0,i.jsx)(n.code,{children:"BaseMindError.cancelled"}),")."]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"options",children:"Options"}),"\n",(0,i.jsx)(n.p,{children:"You can pass an options struct to the client:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-swift",children:'import BaseMindClient\nimport OSLog\n\nlet options = ClientOptions(\n    debug: true,\n    host: "127.0.0.1",\n    logger: Logger(subsystem: "my-sub-system", category: "client"),\n    port: 443,\n    promptConfigId: "c5f5d1fd-d25d-4ba2-b103-8c85f48a679d"\n)\n\nlet client = BaseMindClient(apiKey: "<MyApiKey>", options: options)\n'})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"debug"}),": if set to true (default false) the client will log debug messages."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"host"}),": the host of the BaseMind Gateway server to use."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"logger"}),": an OSLog.Logger instance. If provided it will override the default logger used."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"port"}),": the server port."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"promptConfigId"}),": the ID of the prompt config to use. If given this value will be used by the server."]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Note"}),": you can have multiple client instances with different ",(0,i.jsx)(n.code,{children:"promptConfigId"})," values set. This allows you to use\nmultiple model configurations within a single application."]})]})}function p(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},8672:(e,n,t)=>{t.d(n,{Z:()=>a,a:()=>l});var i=t(959);const s={},r=i.createContext(s);function l(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:l(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);